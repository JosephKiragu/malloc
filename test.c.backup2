#include <stdio.h>
#include <string.h>
#include <pthread.h>
#include "inc/malloc.h"

#define TINY_ALLOC_SIZE 64
#define SMALL_ALLOC_SIZE 512
#define LARGE_ALLOC_SIZE 2048
#define NUM_ALLOCS 200

void test_multiple_allocations(void)
{
    printf("\n=== Testing multiple allocations ===\n");
    
    void *ptrs[NUM_ALLOCS];
    int i;
    int tiny_count = 0, small_count = 0, large_count = 0;
    
    // Allocate many blocks of different sizes
    for (i = 0; i < NUM_ALLOCS; i++)
    {
        size_t size;
        
        if (i % 3 == 0) {
            size = TINY_ALLOC_SIZE;
            tiny_count++;
        }
        else if (i % 3 == 1) {
            size = SMALL_ALLOC_SIZE;
            small_count++;
        }
        else {
            size = LARGE_ALLOC_SIZE;
            large_count++;
        }
            
        ptrs[i] = malloc(size);
        
        if (!ptrs[i])
        {
            printf("Failed to allocate at iteration %d (size=%zu)\n", i, size);
            break;
        }
        
        // Debug: print first few allocations
        if (i < 10) {
            printf("Allocation %d: size=%zu, ptr=%p\n", i, size, ptrs[i]);
        }
    }
    
    printf("\nExpected allocations - TINY: %d, SMALL: %d, LARGE: %d\n", 
           tiny_count, small_count, large_count);
    
    // Show memory state
    printf("\nMemory state after allocations:\n");
    show_alloc_mem();
    
    // Free half the allocations
    printf("\n=== Freeing even-indexed allocations ===\n");
    for (i = 0; i < NUM_ALLOCS; i += 2)
    {
        if (ptrs[i]) {
            if (i < 10) {
                printf("Freeing allocation %d: ptr=%p\n", i, ptrs[i]);
            }
            free(ptrs[i]);
            ptrs[i] = NULL;  // Clear pointer after free
        }
    }
    
    printf("\nMemory state after freeing half:\n");
    show_alloc_mem();
    
    // Free the rest
    printf("\n=== Freeing odd-indexed allocations ===\n");
    for (i = 1; i < NUM_ALLOCS; i += 2)
    {
        if (ptrs[i]) {
            if (i < 10) {
                printf("Freeing allocation %d: ptr=%p\n", i, ptrs[i]);
            }
            free(ptrs[i]);
            ptrs[i] = NULL;
        }
    }
    
    printf("\nMemory state after freeing all:\n");
    show_alloc_mem();
}

void debug_size_calculation(void)
{
    printf("\n=== Debugging size calculations ===\n");
    
    // Let's see what sizes are actually being allocated
    printf("User requested size -> Actual block size:\n");
    printf("TINY_ALLOC_SIZE (%d) -> BLOCK_SIZE(ALIGN(%d)) = %zu\n", 
           TINY_ALLOC_SIZE, TINY_ALLOC_SIZE, BLOCK_SIZE(ALIGN(TINY_ALLOC_SIZE)));
    printf("SMALL_ALLOC_SIZE (%d) -> BLOCK_SIZE(ALIGN(%d)) = %zu\n", 
           SMALL_ALLOC_SIZE, SMALL_ALLOC_SIZE, BLOCK_SIZE(ALIGN(SMALL_ALLOC_SIZE)));
    printf("LARGE_ALLOC_SIZE (%d) -> BLOCK_SIZE(ALIGN(%d)) = %zu\n", 
           LARGE_ALLOC_SIZE, LARGE_ALLOC_SIZE, BLOCK_SIZE(ALIGN(LARGE_ALLOC_SIZE)));
    
    // Test zone type determination
    size_t tiny_block = BLOCK_SIZE(ALIGN(TINY_ALLOC_SIZE));
    size_t small_block = BLOCK_SIZE(ALIGN(SMALL_ALLOC_SIZE));
    // size_t large_block = BLOCK_SIZE(ALIGN(LARGE_ALLOC_SIZE));
    
    printf("\nZone type determination:\n");
    printf("TINY_MAX = %d, BLOCK_SIZE(TINY_MAX) = %zu\n", TINY_MAX, BLOCK_SIZE(TINY_MAX));
    printf("SMALL_MAX = %d, BLOCK_SIZE(SMALL_MAX) = %zu\n", SMALL_MAX, BLOCK_SIZE(SMALL_MAX));
    
    printf("\nTINY block (%zu) <= BLOCK_SIZE(TINY_MAX) (%zu)? %s\n", 
           tiny_block, BLOCK_SIZE(TINY_MAX), tiny_block <= BLOCK_SIZE(TINY_MAX) ? "YES" : "NO");
    printf("SMALL block (%zu) <= BLOCK_SIZE(SMALL_MAX) (%zu)? %s\n", 
           small_block, BLOCK_SIZE(SMALL_MAX), small_block <= BLOCK_SIZE(SMALL_MAX) ? "YES" : "NO");
}

int main(void)
{
    printf("=== Testing malloc implementation ===\n");
    
    // First, debug size calculations
    debug_size_calculation();
    
    // Then run the allocation test
    test_multiple_allocations();
    
    printf("\n=== All tests completed ===\n");
    return (0);
}
